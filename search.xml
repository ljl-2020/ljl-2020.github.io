<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring学习三</title>
      <link href="/2020/07/03/SpringStudyThree/"/>
      <url>/2020/07/03/SpringStudyThree/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><p> 1.AOP是什么？<br> 2.Aspect开发。</p><h3 id="AOP是什么？"><a href="#AOP是什么？" class="headerlink" title="AOP是什么？"></a>AOP是什么？</h3><h4 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h4><p>  AOP的全称为：Aspect Oriented Programming，即面向切面编程，是面向对象编程（OOP)的一种补充。传统业务处理中，通常都会进行事务处理日志记录等操作，使用传统的组合方式和继承方法能实现对业务处理功能的扩充，但是如果要对某一方法改变，则可能要改变多处代码，所以为解决这个问题，AOP思想随之产生，AOP采取横向抽取机制，将分散在各个方法中的重复代码提取出来，然后在程序要使用时提取出来，然后应用到需要执行的地方。横向抽取机制主要使用动态代理实现，分两种情况，一是有接口时，使用JDK动态代理，接口代理的对象与其实现子类同一级别。二是无接口时，使用cglib动态代理。</p><h4 id="AOP相关术语"><a href="#AOP相关术语" class="headerlink" title="AOP相关术语"></a>AOP相关术语</h4><ul><li>Aspect(切面)：在实际应用中切面通常是指封装的用于横向插入系统功能的类。</li><li>Joinpoint(连接点)：类中哪些方法可以被增强。</li><li>Pointcut(切入点)：类中被实际增强的方法。</li><li>Advice(增强/通知)：实际要扩充的功能。</li><li></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习二</title>
      <link href="/2020/06/23/SpringStudyTwo/"/>
      <url>/2020/06/23/SpringStudyTwo/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring中的Bean"><a href="#Spring中的Bean" class="headerlink" title="Spring中的Bean"></a>Spring中的Bean</h3><p>1.Bean的配置<br>2.Bean的作用域<br>3.Bean的装配方式</p><h4 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h4><p>  Spring如同一个工厂，用于生产和管理Spring容器中Bean。Bean是指项目中提供业务功能的Bean,Beans就是一个常见的JavaBean、Java类。那么如何使用这个工厂来配置Bean呢————使用xml文件配置。以下是&lt;beans&gt;常用的属性和子元素。</p><pre><code>    &lt;!-- 将指定的com.ljl.user.dao.UserDao 类交给Spring容器让容器创建对象 --&gt;    &lt;!-- id中的值为实例对象的名字 --&gt;    &lt;bean id="userDao" class="com.ljl.user.dao.UserDao"/&gt;</code></pre><p><img src="/2020/06/23/SpringStudyTwo/IMG_0050.PNG" alt=""></p><p style="color:red;font-size:16px;">注意:<br>  如果在Bean中未设置id和name，那么Spring会将class的值当作id使用。</p><h4 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h4><p>  Spring4.3中Bean的实例定义了七种作用域，如下图<br><img src="/2020/06/23/SpringStudyTwo/IMG_0051.PNG" alt=""><br>介绍下常用的作用域：<br>1.单例（singleton):在整个应用中，只创建bean的一个实例<br><code>&lt;!-- singleton--&gt;      &lt;bean id="userDao" class="com.ljl.user.dao.UserDao" scope="singleton"/&gt;</code><br>如果创建时不使用scope来指定作用域，则默认指定为singleton单例模式。<br>2.原型（Prototype）:每次注入或者通过spring应用上下文获取的时候，都会创建一个新的bean实例<br><code>&lt;!-- prototype--&gt;      &lt;bean id="userDao" class="com.ljl.user.dao.UserDao" scope="prototype"/&gt;</code><br>3.会话（session）：在web应用中，为每个会话创建一个bean实例<br><code>&lt;!-- session--&gt;      &lt;bean id="userDao" class="com.ljl.user.dao.UserDao" scope="session"/&gt;</code><br>4.请求（Request）：在web应用中，为每个请求创建一个bean实例<br><code>&lt;!-- request--&gt;      &lt;bean id="userDao" class="com.ljl.user.dao.UserDao" scope="request"/&gt;</code></p><h4 id="Bean的装配方式"><a href="#Bean的装配方式" class="headerlink" title="Bean的装配方式"></a>Bean的装配方式</h4><p>  Bean的装配可以理解为依赖关系的注入，本次只学习了常用的两种装配方式，基于xml的装配、基于Annotation（注解）方式的装配和自动装配。</p><ul><li>基于xml的装配<br>  spring中提供了两种注入方式，一为基于setter方法，二为基于构造方法。基于构造方法的注入请看第一篇的学习。以下只介绍基于setter方法的装配。<p style="color:red;font-size:16px;">注意:<br>  所有基于setter方法的xml配置均需要有setter方法</p></li></ul><p>1.常量注入：</p><pre><code>    &lt;bean id="user" class="com.ljl.user.dao.User"&gt;        &lt;!--name为属性即（有setter方法的成员）名字 --&gt;        &lt;!--value为属性所设置的具体值--&gt;        &lt;!-- ref为应类型所对应的值 --&gt;        &lt;property name="pwd" value="456"/&gt;    &lt;/bean&gt;</code></pre><p>2.<font color="red">对象注入（重要）：</font></p><pre><code>  &lt;!-- 创建userDao对象 --&gt;    &lt;bean id="userDao" class="com.ljl.user.dao.UserDao"/&gt;    &lt;!-- 创建userService对象 --&gt;    &lt;bean id="userService" class="com.ljl.user.service.UserService"&gt;        &lt;!-- 为userService注入对象引用 --&gt;        &lt;property name="userDao" ref="userDao"/&gt;    &lt;/bean&gt;</code></pre><p>3.数组注入：</p><pre><code> &lt;bean id="user" class="com.ljl.user.dao.User"&gt;        &lt;property name="books" &gt;            &lt;array&gt;                &lt;value&gt;西游记&lt;/value&gt;                &lt;value&gt;水浒传&lt;/value&gt;                &lt;value&gt;红楼梦&lt;/value&gt;                &lt;value&gt;剑来&lt;/value&gt;            &lt;/array&gt;        &lt;/property&gt;    &lt;/bean&gt;</code></pre><p>结果：<img src="/2020/06/23/SpringStudyTwo/IMG_0052.PNG" alt=""><br>其他还有List注入，Map注入，Set注入，以及properties注入形式与数组注入差异不大，其中Map注入和properties注入相似以键值对方式注入数据。</p><ul><li><p>基于Annotation（注解）注入：<br>  尽管基于xml的注入方式可以实现Bean的装配工作，但是如果Bean的数量过大时，这种配置过于繁琐，所以，此时可以利用Annotation方式来进行Benas的装配。以下是常用注解<br><img src="/2020/06/23/SpringStudyTwo/IMG_0053.PNG" alt=""></p><p style="color:red;font-size:16px;">注意:<br>  基于注解方式的注入，首先要导入相应的约束和jar包，可不设置setter方法</p>上表中的注解大致可分为两类：</li><li><p>描述Spring中的Bean（@xxxx 放在类声明的上一行）：<br>  @Component:可以用于任何层，通常不推荐直接写这种注解。<br>  @Repository:用于数据访问层（Dao层）中的Bean。<br>  @Service:用于业务逻辑层（Service层），用于将业务逻辑层的类表示为Spring中的Bean。<br>  @Controller:用于控制层（如Spring MVC 的Controller），用于将控制层中的类标识为Spring中的Bean。</p></li><li><p>为Spring中的属性装配（@xxxx 放在属性、setter、构造方法上一行）：<br>  @Autowired：用于对属性变量、属性的setter及构造方法进行标注，完成Bean的自动装配。<br>  @Resource：作用与@Autowired相似，但@Autowired默认按Bean类型装配，无需设置name和type。而@Resource若指定那么属性，则需要按Bean的名称进行实例，若指定type属性，则按Bean类型进行装配。若都不指定则先按照Bean实例名称进行匹配，不能匹配时按照Bean类型进行装配。<br>  @Qualifier：与@Autowired配合使用，会将默认的按Bena类型匹配改为按Bean实例名称匹配。</p></li></ul><pre><code> &lt;!-- 第一步开启注解处理器 --&gt;    &lt;context:component-scan base-package="com.ljl.user"/&gt;</code></pre><p>UserDao类如下：</p><pre><code>package com.ljl.user.dao;import org.springframework.stereotype.Repository;@Repository("userDao")public class UserDao {    public void addUser(){        System.out.println("添加一个用户");    }}</code></pre><p>UserService类如下：</p><pre><code>package com.ljl.user.service;import com.ljl.user.dao.UserDao;import org.springframework.stereotype.Service;import javax.annotation.Resource;@Service(name="userService")public class UserService {    @Resource(name = "userDao")    private UserDao userDao;    public void addUser(){        userDao.addUser();        System.out.println("UserService添加用户");    }}</code></pre><p>测试类如下：</p><pre><code>package com.ljl.test;import com.ljl.user.service.UserService;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Test {    ApplicationContext context = new ClassPathXmlApplicationContext("bean1.xml");    public static void main(String[] args) {        ApplicationContext context = new ClassPathXmlApplicationContext("bean1.xml");        UserService userService = (UserService) context.getBean("userService");        userService.addUser();    }}</code></pre><p>结果：<br><img src="/2020/06/23/SpringStudyTwo/IMG_0054.PNG" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>  Spring中的Bean的配置，常用的配置方式为xml配置和注解配置，xml配置不适合大量的beans配置，而注解方式则很好的弥补了这一点，所以在实际应用中可以两种方式结合使用，使用xml方式标明Bean的创建，而使用注解方式来装配Bean的属性。Bean的配置总的思路为：</p><ul><li>导入相关的包</li><li>创建需要使用的Bean，即Java类，并创建方法（xml方式的配置必须设置setter方法）。</li><li>创建Spring配置文件，编写相关的Bean配置</li><li>创建测试类 </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习一</title>
      <link href="/2020/06/20/SpringStudyOne/"/>
      <url>/2020/06/20/SpringStudyOne/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring学习基础"><a href="#Spring学习基础" class="headerlink" title="Spring学习基础"></a>Spring学习基础</h3><p>1.Spring是什么？<br>2.Spring能干什么？<br>3.Spring怎么用？</p><h2 id="Spring是什么？"><a href="#Spring是什么？" class="headerlink" title="Spring是什么？"></a>Spring是什么？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spring是一个以IOC（Inversion of Control,控制反转）和AOP（Aspect Oriented Programming）为内核的框架。IOC是Spring的基础。</p><p>IOC(控制反转):在传统的编程方式中，获取对象的方式通常使用new关键字主动创建一个对象。而Spring中的IoC方式，对象有IoC容器来创建，装配（初始化）和管理。这种由程序创建对象的方式转变为Spring IoC容器创建对象的反转过程即为IOC。</p><p>DI(Dependency Inject)：依赖注入。所谓依赖注入，就是由IoC容器在运行期间动态的将某种依赖关系注入到对象之间，例如，将对象B注入到对象A的成员变量。</p><p style="color:red;">IOC 与 DI 之间的关系：<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.控制反转和依赖注入是对同一件事的不同描述，从某个方面讲，就是它们的角度不同。依赖注入是从应用程序角度描述，而控制反转则是从容器角度描述。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.依赖注入不能脱离控制反转而单独存在，DI操作需要在IOC基础之上进行。</p><p>IOC底层原理：<br>  1.使用的技术：<br>    (1)XML配置文件<br>    (2)dom4j解析文件<br>    (3)工厂设计模式<br>    (4)反射<br>  2.步骤：<br>    (1)创建xml配置文件，配置要创建的对象类，如：<br></p><p><code>&lt;bean id="userService" class="com.ljl.user.UserService"&gt;</code><br>    (2)创建工厂类，并增加返回类型为<font color="#0000cd">UserService</font>的方法。在方法体中首先利用dom4j解析xml文件，根据文件解析出class值，然后通过反射创建对象。</p><p></p>以下为案例：<br>User类如下：<p></p><pre><code>package com.ljl.ioc_di;public class User {    private String name;    private int id;    public User() {}    public User(String name, int id) {        this.name = name;        this.id = id;    }    public void setName(String name) {        this.name = name;    }    public void setId(int id) {        this.id = id;    }    @Override    public String toString() {        return "User [name=" + name + ", id=" + id + "]";    }    }applicationContext.xml:```&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd"&gt;    &lt;bean id="user" class="com.ljl.ioc_di.User"&gt;           &lt;property name="name" value="李四"/&gt;           &lt;property name="id" value="2"/&gt;   &lt;/bean&gt;&lt;/beans&gt;```TestSpring:```package com.ljl.test;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import com.ljl.ioc_di.User;public class TestSpring {    @Test    public void fun1() {        ApplicationContext context = new         ClassPathXmlApplicationContext("applicationContext.xml");        User user = (User) context.getBean("user");        System.out.println(user);    }}```结果如下：![结果](SpringStudyOne/SpringStudyTestResult.jpg)</code></pre><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好世界</title>
      <link href="/2020/05/02/first/"/>
      <url>/2020/05/02/first/</url>
      
        <content type="html"><![CDATA[<h2 id="第一个博客"><a href="#第一个博客" class="headerlink" title="第一个博客"></a><span style="font-color:#red; text-align:center">第一个博客</span></h2><h3 id="你好世界"><a href="#你好世界" class="headerlink" title="你好世界"></a>你好世界</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Node </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/02/hello-world/"/>
      <url>/2020/05/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
